{"ast":null,"code":"var _jsxFileName = \"/Users/mehdinajeddine/Dropbox (VOID)/Mehdi/Perso/Reacteur/Formation/Serveur et database/tmp2/react-chat-components/samples/src/moderated-chat/components/report-user-modal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { usePubNub } from \"pubnub-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n/**\n * This modal is opened after clicking the \"report\" icon that is shown when hovering over a message\n * It is used to report users, which can be later viewed in the Moderation Dashboard\n */\nexport const ReportUserModal = ({\n  currentUser,\n  reportedMessage,\n  hideModal,\n  users\n}) => {\n  _s();\n\n  const pubnub = usePubNub();\n  const [reported, setReported] = useState(false);\n  const uuid = (reportedMessage === null || reportedMessage === void 0 ? void 0 : reportedMessage.uuid) || (reportedMessage === null || reportedMessage === void 0 ? void 0 : reportedMessage.publisher) || \"\";\n  const reasons = [{\n    icon: \"delete\",\n    text: \"It's a spam\"\n  }, {\n    icon: \"visibility_off\",\n    text: \"Nudity or sexual activity\"\n  }, {\n    icon: \"healing\",\n    text: \"Hate speech or symbols\"\n  }, {\n    icon: \"thumb_down\",\n    text: \"Violence or dangerous organizations\"\n  }, {\n    icon: \"production_quantity_limits\",\n    text: \"Sales or illegal or regulated goods\"\n  }, {\n    icon: \"mood_bad\",\n    text: \"Bullying or harassment\"\n  }, {\n    icon: \"copyright\",\n    text: \"Intellectual property violation\"\n  }, {\n    icon: \"feedback\",\n    text: \"False information\"\n  }];\n\n  const reportUser = async reason => {\n    if (!reportedMessage) return;\n    setReported(true);\n    const fullUserData = await pubnub.objects.getUUIDMetadata({\n      uuid,\n      include: {\n        customFields: true\n      }\n    });\n    const existingMetadata = fullUserData.data.custom;\n    await pubnub.objects.setUUIDMetadata({\n      uuid,\n      data: {\n        custom: { ...existingMetadata,\n          flag: true,\n          flaggedAt: Date.now(),\n          flaggedBy: `${currentUser.name} (${currentUser.id})`,\n          reason\n        }\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal report-user-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: reported ? \"Thank you for letting us know\" : \"Report user\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"material-icons-outlined\",\n          onClick: () => {\n            hideModal();\n            setReported(false);\n          },\n          children: \"close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), reported ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"material-icons-outlined\",\n          children: \"check_circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your feedback is important in helping us keep the community safe.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            hideModal();\n            setReported(false);\n          },\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Why are you reporting this comment?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), reasons.map(reason => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"report-button\",\n          onClick: () => reportUser(reason.text),\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"material-icons-outlined\",\n            children: reason.icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: reason.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 17\n          }, this)]\n        }, reason.icon, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ReportUserModal, \"A8+NrrVbbVIj7ch17Uit+gf8D7E=\", false, function () {\n  return [usePubNub];\n});\n\n_c = ReportUserModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReportUserModal\");","map":{"version":3,"sources":["/Users/mehdinajeddine/Dropbox (VOID)/Mehdi/Perso/Reacteur/Formation/Serveur et database/tmp2/react-chat-components/samples/src/moderated-chat/components/report-user-modal.tsx"],"names":["React","useState","usePubNub","ReportUserModal","currentUser","reportedMessage","hideModal","users","pubnub","reported","setReported","uuid","publisher","reasons","icon","text","reportUser","reason","fullUserData","objects","getUUIDMetadata","include","customFields","existingMetadata","data","custom","setUUIDMetadata","flag","flaggedAt","Date","now","flaggedBy","name","id","map"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { usePubNub } from \"pubnub-react\";\nimport { UUIDMetadataObject, ObjectCustom } from \"pubnub\";\nimport { MessageEnvelope } from \"@pubnub/react-chat-components\";\n\ntype UserType = UUIDMetadataObject<ObjectCustom>;\n\ninterface ReportUserModalProps {\n  currentUser: UserType;\n  reportedMessage?: MessageEnvelope;\n  hideModal: () => void;\n  users: UserType[];\n}\n\n/**\n * This modal is opened after clicking the \"report\" icon that is shown when hovering over a message\n * It is used to report users, which can be later viewed in the Moderation Dashboard\n */\nexport const ReportUserModal = ({\n  currentUser,\n  reportedMessage,\n  hideModal,\n  users,\n}: ReportUserModalProps): JSX.Element => {\n  const pubnub = usePubNub();\n  const [reported, setReported] = useState(false);\n  const uuid = reportedMessage?.uuid || reportedMessage?.publisher || \"\";\n\n  const reasons = [\n    {\n      icon: \"delete\",\n      text: \"It's a spam\",\n    },\n    {\n      icon: \"visibility_off\",\n      text: \"Nudity or sexual activity\",\n    },\n    {\n      icon: \"healing\",\n      text: \"Hate speech or symbols\",\n    },\n    {\n      icon: \"thumb_down\",\n      text: \"Violence or dangerous organizations\",\n    },\n    {\n      icon: \"production_quantity_limits\",\n      text: \"Sales or illegal or regulated goods\",\n    },\n    {\n      icon: \"mood_bad\",\n      text: \"Bullying or harassment\",\n    },\n    {\n      icon: \"copyright\",\n      text: \"Intellectual property violation\",\n    },\n    {\n      icon: \"feedback\",\n      text: \"False information\",\n    },\n  ];\n\n  const reportUser = async (reason: string) => {\n    if (!reportedMessage) return;\n    setReported(true);\n    const fullUserData = await pubnub.objects.getUUIDMetadata({\n      uuid,\n      include: { customFields: true },\n    });\n    const existingMetadata = fullUserData.data.custom;\n    await pubnub.objects.setUUIDMetadata({\n      uuid,\n      data: {\n        custom: {\n          ...existingMetadata,\n          flag: true,\n          flaggedAt: Date.now(),\n          flaggedBy: `${currentUser.name} (${currentUser.id})`,\n          reason,\n        },\n      },\n    });\n  };\n\n  return (\n    <div className=\"overlay\">\n      <div className=\"modal report-user-modal\">\n        <div className=\"header\">\n          <strong>{reported ? \"Thank you for letting us know\" : \"Report user\"}</strong>\n          <button\n            className=\"material-icons-outlined\"\n            onClick={() => {\n              hideModal();\n              setReported(false);\n            }}\n          >\n            close\n          </button>\n        </div>\n\n        {reported ? (\n          <div className=\"center\">\n            <i className=\"material-icons-outlined\">check_circle</i>\n            <p>Your feedback is important in helping us keep the community safe.</p>\n            <button\n              onClick={() => {\n                hideModal();\n                setReported(false);\n              }}\n            >\n              Close\n            </button>\n          </div>\n        ) : (\n          <>\n            <h2>Why are you reporting this comment?</h2>\n            {reasons.map((reason) => (\n              <button\n                className=\"report-button\"\n                onClick={() => reportUser(reason.text)}\n                key={reason.icon}\n              >\n                <i className=\"material-icons-outlined\">{reason.icon}</i>\n                <span>{reason.text}</span>\n              </button>\n            ))}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}