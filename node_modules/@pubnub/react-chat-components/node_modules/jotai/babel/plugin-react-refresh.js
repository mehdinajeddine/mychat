'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var templateBuilder = require('@babel/template');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var templateBuilder__default = /*#__PURE__*/_interopDefaultLegacy(templateBuilder);

function isAtom(t, callee) {
  if (t.isIdentifier(callee) && callee.name === 'atom') {
    return true;
  }

  if (t.isMemberExpression(callee)) {
    var property = callee.property;

    if (t.isIdentifier(property) && property.name === 'atom') {
      return true;
    }
  }

  return false;
}

function reactRefreshPlugin(_ref) {
  var t = _ref.types;
  return {
    pre: function pre(_ref2) {
      var opts = _ref2.opts;

      if (!opts.filename) {
        throw new Error('Filename must be available');
      }
    },
    visitor: {
      Program: {
        exit: function exit(path) {
          var jotaiAtomCache = templateBuilder__default["default"]("\n          globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {\n            cache: new Map(),\n            get(name, inst) { \n              if (this.cache.has(name)) {\n                return this.cache.get(name)\n              }\n              this.cache.set(name, inst)\n              return inst\n            },\n          }")();
          path.unshiftContainer('body', jotaiAtomCache);
        }
      },
      ExportDefaultDeclaration: function ExportDefaultDeclaration(nodePath, state) {
        var node = nodePath.node;

        if (t.isCallExpression(node.declaration) && isAtom(t, node.declaration.callee)) {
          var filename = state.filename || 'unknown';
          var atomKey = filename + "/defaultExport";
          var buildExport = templateBuilder__default["default"]("export default globalThis.jotaiAtomCache.get(%%atomKey%%, %%atom%%)");
          var ast = buildExport({
            atomKey: t.stringLiteral(atomKey),
            atom: node.declaration
          });
          nodePath.replaceWith(ast);
        }
      },
      VariableDeclarator: function VariableDeclarator(nodePath, state) {
        if (t.isIdentifier(nodePath.node.id) && t.isCallExpression(nodePath.node.init) && isAtom(t, nodePath.node.init.callee)) {
          var filename = state.filename || 'unknown';
          var atomKey = filename + "/" + nodePath.node.id.name;
          var buildAtomDeclaration = templateBuilder__default["default"]("const %%atomIdentifier%% = globalThis.jotaiAtomCache.get(%%atomKey%%, %%atom%%)");
          var ast = buildAtomDeclaration({
            atomIdentifier: t.identifier(nodePath.node.id.name),
            atomKey: t.stringLiteral(atomKey),
            atom: nodePath.node.init
          });
          nodePath.parentPath.replaceWith(ast);
        }
      }
    }
  };
}

exports["default"] = reactRefreshPlugin;
