{"ast":null,"code":"var _jsxFileName = \"/Users/mehdinajeddine/Dropbox (VOID)/Mehdi/Perso/Reacteur/Formation/Serveur et database/tmp2/react-chat-components/samples/src/moderated-chat/moderated-chat.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Picker } from \"emoji-mart\";\nimport { usePubNub } from \"pubnub-react\";\nimport { ChannelList, Chat, MemberList, MessageInput, MessageList, TypingIndicator, useChannelMembers, useChannels, usePresence, useUser, useUserMemberships, useUsers } from \"@pubnub/react-chat-components\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { CreateChatModal } from \"./components/create-chat-modal\";\nimport { ReportUserModal } from \"./components/report-user-modal\";\nimport { PublicChannelsModal } from \"./components/public-channels-modal\";\nimport \"./moderated-chat.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst defaultChannel = {\n  id: \"default\",\n  name: \"Default Channel\",\n  description: \"This is the default channel\"\n};\nexport default function ModeratedChat() {\n  _s();\n\n  var _presenceData$current, _presenceData$current2, _currentUser$custom, _currentUser$custom2, _currentUser$custom2$, _currentUser$custom3, _currentUser$custom3$;\n\n  /**\n   * Component state related hooks\n   * Those mostly store the current channel, modals and side panels being shown\n   */\n  const [theme, setTheme] = useState(\"light\");\n  const [currentChannel, setCurrentChannel] = useState(defaultChannel);\n  const [showMembers, setShowMembers] = useState(false);\n  const [showChannels, setShowChannels] = useState(true);\n  const [showPublicChannelsModal, setShowPublicChannelsModal] = useState(false);\n  const [showCreateChatModal, setShowCreateChatModal] = useState(false);\n  const [showReportUserModal, setShowReportUserModal] = useState(false);\n  const [channelsFilter, setChannelsFilter] = useState(\"\");\n  const [membersFilter, setMembersFilter] = useState(\"\");\n  const [reportedMessage, setReportedMessage] = useState();\n  /**\n   * All data related to Users, Channels and Memberships is stored within PubNub Objects API\n   * It can be easily accessed using React Chat Components hooks\n   */\n\n  const pubnub = usePubNub();\n  const uuid = pubnub.getUUID();\n  const [currentUser] = useUser({\n    uuid\n  });\n  const [allUsers] = useUsers({\n    include: {\n      customFields: true\n    }\n  });\n  const [allChannels] = useChannels({\n    include: {\n      customFields: true\n    }\n  });\n  const [joinedChannels,, refetchJoinedChannels] = useUserMemberships({\n    include: {\n      channelFields: true,\n      customChannelFields: true\n    }\n  });\n  const [channelMembers,, refetchChannelMemberships, totalChannelMembers] = useChannelMembers({\n    channel: currentChannel.id,\n    include: {\n      customUUIDFields: true\n    }\n  });\n  const [presenceData] = usePresence({\n    channels: joinedChannels.length ? joinedChannels.map(c => c.id) : [currentChannel.id]\n  });\n  /**\n   * Some of the data related to current channel, current user and its' joined channels\n   * has to be filtered down and mapped from the hooks data\n   */\n\n  const presentUUIDs = (_presenceData$current = presenceData[currentChannel.id]) === null || _presenceData$current === void 0 ? void 0 : (_presenceData$current2 = _presenceData$current.occupants) === null || _presenceData$current2 === void 0 ? void 0 : _presenceData$current2.map(o => o.uuid);\n  const groupChannels = joinedChannels.filter(c => {\n    var _c$id, _c$name;\n\n    return ((_c$id = c.id) === null || _c$id === void 0 ? void 0 : _c$id.startsWith(\"space.\")) && ((_c$name = c.name) === null || _c$name === void 0 ? void 0 : _c$name.toLowerCase().includes(channelsFilter.toLowerCase()));\n  });\n  const groupChannelsToJoin = allChannels.filter(c => c.id.startsWith(\"space.\") && !joinedChannels.some(b => c.id === b.id));\n  const directChannels = joinedChannels.filter(c => {\n    var _c$id2, _c$id3;\n\n    return ((_c$id2 = c.id) === null || _c$id2 === void 0 ? void 0 : _c$id2.startsWith(\"direct.\")) || ((_c$id3 = c.id) === null || _c$id3 === void 0 ? void 0 : _c$id3.startsWith(\"group.\"));\n  }).map(c => {\n    var _c$id4;\n\n    if (!((_c$id4 = c.id) === null || _c$id4 === void 0 ? void 0 : _c$id4.startsWith(\"direct.\"))) return c;\n    const interlocutorId = c.id.replace(uuid, \"\").replace(\"direct.\", \"\").replace(\"@\", \"\");\n    const interlocutor = allUsers.find(u => u.id === interlocutorId);\n\n    if (interlocutor) {\n      c.custom = {\n        thumb: interlocutor.profileUrl || \"\"\n      };\n      c.name = interlocutor.name;\n    }\n\n    return c;\n  }).filter(c => {\n    var _c$name2;\n\n    return (_c$name2 = c.name) === null || _c$name2 === void 0 ? void 0 : _c$name2.toLowerCase().includes(channelsFilter.toLowerCase());\n  });\n  const isUserBanned = currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$custom = currentUser.custom) === null || _currentUser$custom === void 0 ? void 0 : _currentUser$custom.ban;\n  const isUserMuted = currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$custom2 = currentUser.custom) === null || _currentUser$custom2 === void 0 ? void 0 : (_currentUser$custom2$ = _currentUser$custom2.mutedChannels) === null || _currentUser$custom2$ === void 0 ? void 0 : _currentUser$custom2$.split(\",\").includes(currentChannel.id);\n  const isUserBlocked = currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$custom3 = currentUser.custom) === null || _currentUser$custom3 === void 0 ? void 0 : (_currentUser$custom3$ = _currentUser$custom3.blockedChannels) === null || _currentUser$custom3$ === void 0 ? void 0 : _currentUser$custom3$.split(\",\").includes(currentChannel.id);\n  /**\n   * Creating and removing channel memberships (not subscriptions!)\n   */\n\n  const leaveChannel = async (channel, event) => {\n    event.stopPropagation();\n    await pubnub.objects.removeMemberships({\n      channels: [channel.id]\n    });\n    setAnotherCurrentChannel(channel.id);\n  };\n\n  const refreshMemberships = useCallback(event => {\n    if (event.channel.startsWith(\"user_\")) refetchJoinedChannels();\n    if (event.channel === currentChannel.id) refetchChannelMemberships();\n  }, [currentChannel, refetchJoinedChannels, refetchChannelMemberships]);\n\n  const setAnotherCurrentChannel = channelId => {\n    if (currentChannel.id === channelId) {\n      const newCurrentChannel = joinedChannels === null || joinedChannels === void 0 ? void 0 : joinedChannels.find(ch => ch.id !== channelId);\n      if (newCurrentChannel) setCurrentChannel(newCurrentChannel);\n    }\n  };\n  /**\n   * Handling publish errors\n   */\n\n\n  const handleError = e => {\n    var _e$status, _e$status2;\n\n    if (((_e$status = e.status) === null || _e$status === void 0 ? void 0 : _e$status.operation) === \"PNPublishOperation\" && ((_e$status2 = e.status) === null || _e$status2 === void 0 ? void 0 : _e$status2.statusCode) === 403 || e.message.startsWith(\"Publish failed\")) {\n      alert(\"Your message was blocked. Perhaps you tried to use offensive language or send an image that contains nudity?\");\n    }\n  };\n\n  useEffect(() => {\n    if (currentChannel.id === \"default\" && joinedChannels.length) setCurrentChannel(joinedChannels[0]);\n  }, [currentChannel, joinedChannels]);\n  /**\n   * Rendered markup is a mixture of PubNub Chat Components (Chat, ChannelList, MessageList,\n   * MessageInput, MemberList) and some elements to display additional information and to handle\n   * custom behaviors (channels modal, showing/hiding panels, responsive design)\n   */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app-moderated app-moderated--${theme}`,\n    children: /*#__PURE__*/_jsxDEV(Chat, {\n      theme: theme,\n      users: allUsers,\n      currentChannel: currentChannel.id,\n      channels: [...joinedChannels.map(c => c.id), uuid],\n      onError: handleError,\n      onMembership: e => refreshMemberships(e),\n      children: [showPublicChannelsModal && /*#__PURE__*/_jsxDEV(PublicChannelsModal, {\n        groupChannelsToJoin,\n        hideModal: () => setShowPublicChannelsModal(false),\n        setCurrentChannel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this), showCreateChatModal && /*#__PURE__*/_jsxDEV(CreateChatModal, {\n        currentUser,\n        hideModal: () => setShowCreateChatModal(false),\n        setCurrentChannel,\n        users: allUsers.filter(u => u.id !== uuid)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }, this), showReportUserModal && /*#__PURE__*/_jsxDEV(ReportUserModal, {\n        currentUser,\n        reportedMessage,\n        hideModal: () => setShowReportUserModal(false),\n        users: allUsers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this), isUserBanned ? /*#__PURE__*/_jsxDEV(\"strong\", {\n        className: \"error\",\n        children: \"Unfortunately, you were banned from the chat.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `channels-panel ${showChannels && \"shown\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-info\",\n            children: [currentUser && /*#__PURE__*/_jsxDEV(MemberList, {\n              members: [currentUser],\n              selfText: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"mobile material-icons-outlined\",\n              onClick: () => setShowChannels(false),\n              children: \"close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"theme-switcher\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"material-icons-outlined\",\n              children: \"brightness_4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: theme,\n              onClick: () => setTheme(theme === \"light\" ? \"dark\" : \"light\"),\n              children: /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              onChange: e => setChannelsFilter(e.target.value),\n              placeholder: \"Search in...\",\n              type: \"text\",\n              value: channelsFilter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"material-icons-outlined\",\n              children: \"search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"channel-lists\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [\"Channels\", \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"material-icons-outlined\",\n                onClick: () => setShowPublicChannelsModal(true),\n                children: \"add_circle_outline\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(ChannelList, {\n                channels: groupChannels,\n                onChannelSwitched: channel => setCurrentChannel(channel),\n                extraActionsRenderer: c => /*#__PURE__*/_jsxDEV(\"div\", {\n                  onClick: e => leaveChannel(c, e),\n                  title: \"Leave channel\",\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"material-icons-outlined small\",\n                    children: \"logout\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 246,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [\"Direct chats\", \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"material-icons-outlined\",\n                onClick: () => setShowCreateChatModal(true),\n                children: \"add_circle_outline\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(ChannelList, {\n                channels: directChannels,\n                onChannelSwitched: channel => setCurrentChannel(channel),\n                extraActionsRenderer: c => /*#__PURE__*/_jsxDEV(\"div\", {\n                  onClick: e => leaveChannel(c, e),\n                  title: \"Leave channel\",\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"material-icons-outlined small\",\n                    children: \"logout\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 266,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 265,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-window\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"channel-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"mobile material-icons-outlined\",\n              onClick: () => setShowChannels(true),\n              children: \"menu\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: () => setShowMembers(!showMembers),\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [currentChannel.name || currentChannel.id, !isUserBlocked && /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"material-icons-outlined\",\n                  children: \"arrow_right\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 285,\n                  columnNumber: 40\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [totalChannelMembers, \" members\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 15\n          }, this), isUserBlocked ? /*#__PURE__*/_jsxDEV(\"strong\", {\n            className: \"error\",\n            children: \"Unfortunately, you were blocked from this channel.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(MessageList, {\n              fetchMessages: 20,\n              enableReactions: !isUserMuted,\n              reactionsPicker: isUserMuted ? undefined : /*#__PURE__*/_jsxDEV(Picker, {\n                theme: theme\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 301,\n                columnNumber: 64\n              }, this),\n              extraActionsRenderer: message => isUserMuted ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {\n                onClick: () => {\n                  setReportedMessage(message);\n                  setShowReportUserModal(true);\n                },\n                title: \"Report user\",\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"material-icons-outlined\",\n                  children: \"campaign\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 313,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 25\n              }, this),\n              children: /*#__PURE__*/_jsxDEV(TypingIndicator, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n              disabled: isUserMuted,\n              typingIndicator: true,\n              fileUpload: \"image\",\n              emojiPicker: /*#__PURE__*/_jsxDEV(Picker, {\n                theme: theme\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 34\n              }, this),\n              placeholder: isUserMuted ? \"You were muted from this channel\" : \"Send message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `members-panel ${showMembers && !isUserBlocked ? \"shown\" : \"hidden\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Members\", /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"material-icons-outlined\",\n              onClick: () => setShowMembers(false),\n              children: \"close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              onChange: e => setMembersFilter(e.target.value),\n              placeholder: \"Search in members\",\n              type: \"text\",\n              value: membersFilter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"material-icons-outlined\",\n              children: \"search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MemberList, {\n            members: channelMembers.filter(c => {\n              var _c$name3;\n\n              return (_c$name3 = c.name) === null || _c$name3 === void 0 ? void 0 : _c$name3.toLowerCase().includes(membersFilter.toLowerCase());\n            }),\n            presentMembers: presentUUIDs\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ModeratedChat, \"vIiNZL+/YkpSilfAt5/TzRtj68U=\", false, function () {\n  return [usePubNub, useUser, useUsers, useChannels, useUserMemberships, useChannelMembers, usePresence];\n});\n\n_c = ModeratedChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModeratedChat\");","map":{"version":3,"sources":["/Users/mehdinajeddine/Dropbox (VOID)/Mehdi/Perso/Reacteur/Formation/Serveur et database/tmp2/react-chat-components/samples/src/moderated-chat/moderated-chat.tsx"],"names":["React","useState","useEffect","useCallback","Picker","usePubNub","ChannelList","Chat","MemberList","MessageInput","MessageList","TypingIndicator","useChannelMembers","useChannels","usePresence","useUser","useUserMemberships","useUsers","CreateChatModal","ReportUserModal","PublicChannelsModal","defaultChannel","id","name","description","ModeratedChat","theme","setTheme","currentChannel","setCurrentChannel","showMembers","setShowMembers","showChannels","setShowChannels","showPublicChannelsModal","setShowPublicChannelsModal","showCreateChatModal","setShowCreateChatModal","showReportUserModal","setShowReportUserModal","channelsFilter","setChannelsFilter","membersFilter","setMembersFilter","reportedMessage","setReportedMessage","pubnub","uuid","getUUID","currentUser","allUsers","include","customFields","allChannels","joinedChannels","refetchJoinedChannels","channelFields","customChannelFields","channelMembers","refetchChannelMemberships","totalChannelMembers","channel","customUUIDFields","presenceData","channels","length","map","c","presentUUIDs","occupants","o","groupChannels","filter","startsWith","toLowerCase","includes","groupChannelsToJoin","some","b","directChannels","interlocutorId","replace","interlocutor","find","u","custom","thumb","profileUrl","isUserBanned","ban","isUserMuted","mutedChannels","split","isUserBlocked","blockedChannels","leaveChannel","event","stopPropagation","objects","removeMemberships","setAnotherCurrentChannel","refreshMemberships","channelId","newCurrentChannel","ch","handleError","e","status","operation","statusCode","message","alert","hideModal","users","target","value","undefined"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, MouseEvent } from \"react\";\nimport { ChannelMetadataObject, ObjectCustom, BaseObjectsEvent } from \"pubnub\";\nimport { Picker } from \"emoji-mart\";\nimport { usePubNub } from \"pubnub-react\";\nimport {\n  ChannelList,\n  Chat,\n  MemberList,\n  MessageEnvelope,\n  MessageInput,\n  MessageList,\n  TypingIndicator,\n  useChannelMembers,\n  useChannels,\n  usePresence,\n  useUser,\n  useUserMemberships,\n  useUsers,\n} from \"@pubnub/react-chat-components\";\nimport \"emoji-mart/css/emoji-mart.css\";\n\nimport { CreateChatModal } from \"./components/create-chat-modal\";\nimport { ReportUserModal } from \"./components/report-user-modal\";\nimport { PublicChannelsModal } from \"./components/public-channels-modal\";\nimport \"./moderated-chat.scss\";\n\ntype ChannelType = ChannelMetadataObject<ObjectCustom>;\n\nconst defaultChannel = {\n  id: \"default\",\n  name: \"Default Channel\",\n  description: \"This is the default channel\",\n} as Pick<ChannelType, \"id\" | \"name\" | \"description\">;\n\nexport default function ModeratedChat(): JSX.Element {\n  /**\n   * Component state related hooks\n   * Those mostly store the current channel, modals and side panels being shown\n   */\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n  const [currentChannel, setCurrentChannel] = useState(defaultChannel);\n  const [showMembers, setShowMembers] = useState(false);\n  const [showChannels, setShowChannels] = useState(true);\n  const [showPublicChannelsModal, setShowPublicChannelsModal] = useState(false);\n  const [showCreateChatModal, setShowCreateChatModal] = useState(false);\n  const [showReportUserModal, setShowReportUserModal] = useState(false);\n  const [channelsFilter, setChannelsFilter] = useState(\"\");\n  const [membersFilter, setMembersFilter] = useState(\"\");\n  const [reportedMessage, setReportedMessage] = useState<MessageEnvelope>();\n\n  /**\n   * All data related to Users, Channels and Memberships is stored within PubNub Objects API\n   * It can be easily accessed using React Chat Components hooks\n   */\n  const pubnub = usePubNub();\n  const uuid = pubnub.getUUID();\n  const [currentUser] = useUser({ uuid });\n  const [allUsers] = useUsers({ include: { customFields: true } });\n  const [allChannels] = useChannels({ include: { customFields: true } });\n  const [joinedChannels, , refetchJoinedChannels] = useUserMemberships({\n    include: { channelFields: true, customChannelFields: true },\n  });\n  const [channelMembers, , refetchChannelMemberships, totalChannelMembers] = useChannelMembers({\n    channel: currentChannel.id,\n    include: { customUUIDFields: true },\n  });\n  const [presenceData] = usePresence({\n    channels: joinedChannels.length ? joinedChannels.map((c) => c.id) : [currentChannel.id],\n  });\n\n  /**\n   * Some of the data related to current channel, current user and its' joined channels\n   * has to be filtered down and mapped from the hooks data\n   */\n  const presentUUIDs = presenceData[currentChannel.id]?.occupants?.map((o) => o.uuid);\n  const groupChannels = joinedChannels.filter(\n    (c) =>\n      c.id?.startsWith(\"space.\") && c.name?.toLowerCase().includes(channelsFilter.toLowerCase())\n  );\n  const groupChannelsToJoin = allChannels.filter(\n    (c) => c.id.startsWith(\"space.\") && !joinedChannels.some((b) => c.id === b.id)\n  );\n  const directChannels = joinedChannels\n    .filter((c) => c.id?.startsWith(\"direct.\") || c.id?.startsWith(\"group.\"))\n    .map((c) => {\n      if (!c.id?.startsWith(\"direct.\")) return c;\n      const interlocutorId = c.id.replace(uuid, \"\").replace(\"direct.\", \"\").replace(\"@\", \"\");\n      const interlocutor = allUsers.find((u) => u.id === interlocutorId);\n      if (interlocutor) {\n        c.custom = { thumb: interlocutor.profileUrl || \"\" };\n        c.name = interlocutor.name;\n      }\n      return c;\n    })\n    .filter((c) => c.name?.toLowerCase().includes(channelsFilter.toLowerCase()));\n\n  const isUserBanned = currentUser?.custom?.ban;\n  const isUserMuted = (currentUser?.custom?.mutedChannels as string)\n    ?.split(\",\")\n    .includes(currentChannel.id);\n  const isUserBlocked = (currentUser?.custom?.blockedChannels as string)\n    ?.split(\",\")\n    .includes(currentChannel.id);\n\n  /**\n   * Creating and removing channel memberships (not subscriptions!)\n   */\n  const leaveChannel = async (channel: ChannelType, event: MouseEvent) => {\n    event.stopPropagation();\n    await pubnub.objects.removeMemberships({ channels: [channel.id] });\n    setAnotherCurrentChannel(channel.id);\n  };\n\n  const refreshMemberships = useCallback(\n    (event: BaseObjectsEvent) => {\n      if (event.channel.startsWith(\"user_\")) refetchJoinedChannels();\n      if (event.channel === currentChannel.id) refetchChannelMemberships();\n    },\n    [currentChannel, refetchJoinedChannels, refetchChannelMemberships]\n  );\n\n  const setAnotherCurrentChannel = (channelId: string) => {\n    if (currentChannel.id === channelId) {\n      const newCurrentChannel = joinedChannels?.find((ch) => ch.id !== channelId);\n      if (newCurrentChannel) setCurrentChannel(newCurrentChannel);\n    }\n  };\n\n  /**\n   * Handling publish errors\n   */\n  const handleError = (e: any) => {\n    if (\n      (e.status?.operation === \"PNPublishOperation\" && e.status?.statusCode === 403) ||\n      e.message.startsWith(\"Publish failed\")\n    ) {\n      alert(\n        \"Your message was blocked. Perhaps you tried to use offensive language or send an image that contains nudity?\"\n      );\n    }\n  };\n\n  useEffect(() => {\n    if (currentChannel.id === \"default\" && joinedChannels.length)\n      setCurrentChannel(joinedChannels[0]);\n  }, [currentChannel, joinedChannels]);\n\n  /**\n   * Rendered markup is a mixture of PubNub Chat Components (Chat, ChannelList, MessageList,\n   * MessageInput, MemberList) and some elements to display additional information and to handle\n   * custom behaviors (channels modal, showing/hiding panels, responsive design)\n   */\n  return (\n    <div className={`app-moderated app-moderated--${theme}`}>\n      {/* Be sure to wrap Chat component in PubNubProvider from pubnub-react package.\n        In this case it's done in the index.tsx file */}\n      {/* Current uuid is passed to channels prop to subscribe and listen to User metadata changes */}\n      <Chat\n        theme={theme}\n        users={allUsers}\n        currentChannel={currentChannel.id}\n        channels={[...joinedChannels.map((c) => c.id), uuid]}\n        onError={handleError}\n        onMembership={(e) => refreshMemberships(e)}\n      >\n        {showPublicChannelsModal && (\n          <PublicChannelsModal\n            {...{\n              groupChannelsToJoin,\n              hideModal: () => setShowPublicChannelsModal(false),\n              setCurrentChannel,\n            }}\n          />\n        )}\n        {showCreateChatModal && (\n          <CreateChatModal\n            {...{\n              currentUser,\n              hideModal: () => setShowCreateChatModal(false),\n              setCurrentChannel,\n              users: allUsers.filter((u) => u.id !== uuid),\n            }}\n          />\n        )}\n        {showReportUserModal && (\n          <ReportUserModal\n            {...{\n              currentUser,\n              reportedMessage,\n              hideModal: () => setShowReportUserModal(false),\n              users: allUsers,\n            }}\n          />\n        )}\n        {isUserBanned ? (\n          <strong className=\"error\">Unfortunately, you were banned from the chat.</strong>\n        ) : (\n          <>\n            <div className={`channels-panel ${showChannels && \"shown\"}`}>\n              <div className=\"user-info\">\n                {currentUser && <MemberList members={[currentUser]} selfText=\"\" />}\n                <button\n                  className=\"mobile material-icons-outlined\"\n                  onClick={() => setShowChannels(false)}\n                >\n                  close\n                </button>\n              </div>\n\n              <div className=\"theme-switcher\">\n                <i className=\"material-icons-outlined\">brightness_4</i>\n                <button\n                  className={theme}\n                  onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n                >\n                  <span></span>\n                </button>\n              </div>\n\n              <div className=\"filter-input\">\n                <input\n                  onChange={(e) => setChannelsFilter(e.target.value)}\n                  placeholder=\"Search in...\"\n                  type=\"text\"\n                  value={channelsFilter}\n                />\n                <i className=\"material-icons-outlined\">search</i>\n              </div>\n\n              <div className=\"channel-lists\">\n                <h2>\n                  Channels{\" \"}\n                  <button\n                    className=\"material-icons-outlined\"\n                    onClick={() => setShowPublicChannelsModal(true)}\n                  >\n                    add_circle_outline\n                  </button>\n                </h2>\n                <div>\n                  <ChannelList\n                    channels={groupChannels}\n                    onChannelSwitched={(channel) => setCurrentChannel(channel)}\n                    extraActionsRenderer={(c) => (\n                      <div onClick={(e) => leaveChannel(c, e)} title=\"Leave channel\">\n                        <i className=\"material-icons-outlined small\">logout</i>\n                      </div>\n                    )}\n                  />\n                </div>\n                <h2>\n                  Direct chats{\" \"}\n                  <button\n                    className=\"material-icons-outlined\"\n                    onClick={() => setShowCreateChatModal(true)}\n                  >\n                    add_circle_outline\n                  </button>\n                </h2>\n                <div>\n                  <ChannelList\n                    channels={directChannels}\n                    onChannelSwitched={(channel) => setCurrentChannel(channel)}\n                    extraActionsRenderer={(c) => (\n                      <div onClick={(e) => leaveChannel(c, e)} title=\"Leave channel\">\n                        <i className=\"material-icons-outlined small\">logout</i>\n                      </div>\n                    )}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"chat-window\">\n              <div className=\"channel-info\">\n                <button\n                  className=\"mobile material-icons-outlined\"\n                  onClick={() => setShowChannels(true)}\n                >\n                  menu\n                </button>\n                <span onClick={() => setShowMembers(!showMembers)}>\n                  <strong>\n                    {currentChannel.name || currentChannel.id}\n                    {!isUserBlocked && <i className=\"material-icons-outlined\">arrow_right</i>}\n                  </strong>\n                  <p>{totalChannelMembers} members</p>\n                </span>\n                <hr />\n              </div>\n\n              {isUserBlocked ? (\n                <strong className=\"error\">\n                  Unfortunately, you were blocked from this channel.\n                </strong>\n              ) : (\n                <>\n                  <MessageList\n                    fetchMessages={20}\n                    enableReactions={!isUserMuted}\n                    reactionsPicker={isUserMuted ? undefined : <Picker theme={theme} />}\n                    extraActionsRenderer={(message) =>\n                      isUserMuted ? (\n                        <></>\n                      ) : (\n                        <div\n                          onClick={() => {\n                            setReportedMessage(message);\n                            setShowReportUserModal(true);\n                          }}\n                          title=\"Report user\"\n                        >\n                          <i className=\"material-icons-outlined\">campaign</i>\n                        </div>\n                      )\n                    }\n                  >\n                    <TypingIndicator />\n                  </MessageList>\n                  <hr />\n                  <MessageInput\n                    disabled={isUserMuted}\n                    typingIndicator\n                    fileUpload=\"image\"\n                    emojiPicker={<Picker theme={theme} />}\n                    placeholder={isUserMuted ? \"You were muted from this channel\" : \"Send message\"}\n                  />\n                </>\n              )}\n            </div>\n\n            <div className={`members-panel ${showMembers && !isUserBlocked ? \"shown\" : \"hidden\"}`}>\n              <h2>\n                Members\n                <button className=\"material-icons-outlined\" onClick={() => setShowMembers(false)}>\n                  close\n                </button>\n              </h2>\n              <div className=\"filter-input\">\n                <input\n                  onChange={(e) => setMembersFilter(e.target.value)}\n                  placeholder=\"Search in members\"\n                  type=\"text\"\n                  value={membersFilter}\n                />\n                <i className=\"material-icons-outlined\">search</i>\n              </div>\n              <MemberList\n                members={channelMembers.filter((c) =>\n                  c.name?.toLowerCase().includes(membersFilter.toLowerCase())\n                )}\n                presentMembers={presentUUIDs}\n              />\n            </div>\n          </>\n        )}\n      </Chat>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}