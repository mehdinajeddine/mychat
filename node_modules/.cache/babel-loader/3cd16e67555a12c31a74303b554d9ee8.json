{"ast":null,"code":"var _jsxFileName = \"/Users/mehdinajeddine/Dropbox (VOID)/Mehdi/Perso/Reacteur/Formation/Serveur et database/tmp2/react-chat-components/samples/src/moderated-chat/components/create-chat-modal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { usePubNub } from \"pubnub-react\";\nimport { MemberList, getNameInitials, getPredefinedColor } from \"@pubnub/react-chat-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * This modal is opened after clicking the \"plus\" icon next to the Direct chats header\n * It is used to create new private chats between selected users\n * It creates two kind of channels, direct. and group., depending on how many users were selected\n */\nexport const CreateChatModal = ({\n  users,\n  currentUser,\n  setCurrentChannel,\n  hideModal\n}) => {\n  _s();\n\n  const pubnub = usePubNub();\n  const [creatingChannel, setCreatingChannel] = useState(false);\n  const [showGroups, setShowGroups] = useState(false);\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [usersFilter, setUsersFilter] = useState(\"\");\n  const [channelName, setChannelName] = useState(\"\");\n\n  const handleCheck = member => {\n    setSelectedUsers(users => {\n      return users.find(m => m.id === member.id) ? users.filter(m => m.id !== member.id) : [...users, member];\n    });\n  };\n\n  const createChat = async user => {\n    if (creatingChannel) return;\n    setCreatingChannel(true);\n    let uuids, channel, localData, remoteData;\n    const randomHex = [...Array(27)].map(() => Math.floor(Math.random() * 16).toString(16)).join(\"\");\n    const custom = {\n      thumb: `https://www.gravatar.com/avatar/${randomHex}?s=256&d=identicon`\n    };\n\n    if (user) {\n      /** 1-on-1 chat */\n      const users = [currentUser, user];\n      uuids = users.map(m => m.id).sort();\n      channel = `direct.${uuids.join(\"@\")}`;\n      remoteData = {\n        name: users.map(m => m.name).sort().join(\" and \"),\n        custom\n      };\n      localData = {\n        name: user.name,\n        custom: {\n          thumb: user.profileUrl\n        }\n      };\n    } else {\n      /** Group chat */\n      const users = [currentUser, ...selectedUsers];\n      uuids = users.map(m => m.id).sort();\n      channel = `group.${randomHex}`;\n      const name = channelName || users.map(m => {\n        var _m$name;\n\n        return (_m$name = m.name) === null || _m$name === void 0 ? void 0 : _m$name.split(\" \")[0];\n      }).sort().join(\", \");\n      remoteData = {\n        name,\n        custom\n      };\n      localData = remoteData;\n    }\n\n    await pubnub.objects.setChannelMetadata({\n      channel,\n      data: remoteData\n    });\n    await pubnub.objects.setChannelMembers({\n      channel,\n      uuids\n    });\n    setCurrentChannel({\n      id: channel,\n      ...localData\n    });\n    setCreatingChannel(false);\n    hideModal();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal create-chat-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [showGroups && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"material-icons-outlined\",\n          onClick: () => setShowGroups(false),\n          children: \"chevron_left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"New chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"material-icons-outlined\",\n          onClick: () => hideModal(),\n          children: \"close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setUsersFilter(e.target.value),\n          placeholder: \"Search in users\",\n          type: \"text\",\n          value: usersFilter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"material-icons-outlined\",\n          children: \"search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), showGroups ? /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"large\",\n        onChange: e => setChannelName(e.target.value),\n        placeholder: \"Group chat name (optional)\",\n        type: \"text\",\n        value: channelName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"group-button\",\n        onClick: () => setShowGroups(true),\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"material-icons-outlined\",\n          children: \"people\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"New group chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"material-icons-outlined\",\n          children: \"chevron_right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MemberList, {\n        members: users.filter(u => {\n          var _u$name;\n\n          return (_u$name = u.name) === null || _u$name === void 0 ? void 0 : _u$name.toLowerCase().includes(usersFilter.toLowerCase());\n        }),\n        onMemberClicked: user => createChat(user),\n        memberRenderer: showGroups ? user => SelectableUserRenderer({\n          user,\n          selectedUsers,\n          handleCheck\n        }) : undefined\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), !!selectedUsers.length && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: creatingChannel,\n          onClick: () => createChat(),\n          children: \"Create group chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n/**\n * This custom renderer is passed into the Chat Components' MemberList\n * It is used to inject checked/unchecked icon into each member on the list\n * It uses most of the same classes as Components to look the same way apart of the icon\n */\n\n_s(CreateChatModal, \"bObbLrM5o2TAGr/7rPuJ48PQ2wk=\", false, function () {\n  return [usePubNub];\n});\n\n_c = CreateChatModal;\n\nconst SelectableUserRenderer = ({\n  user,\n  selectedUsers,\n  handleCheck\n}) => {\n  var _user$custom;\n\n  const userSelected = selectedUsers.find(m => m.id === user.id);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pn-member\",\n    onClick: () => handleCheck(user),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pn-member__avatar\",\n      style: {\n        backgroundColor: getPredefinedColor(user.id)\n      },\n      children: user.profileUrl ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: user.profileUrl,\n        alt: \"User avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this) : getNameInitials(user.name || user.id)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pn-member__main\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"pn-member__name\",\n        children: user.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"pn-member__title\",\n        children: (_user$custom = user.custom) === null || _user$custom === void 0 ? void 0 : _user$custom.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `check-icon ${userSelected && \"checked\"}`,\n      children: userSelected && /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"material-icons-outlined\",\n        children: \"check\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 26\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)]\n  }, user.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = SelectableUserRenderer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CreateChatModal\");\n$RefreshReg$(_c2, \"SelectableUserRenderer\");","map":{"version":3,"sources":["/Users/mehdinajeddine/Dropbox (VOID)/Mehdi/Perso/Reacteur/Formation/Serveur et database/tmp2/react-chat-components/samples/src/moderated-chat/components/create-chat-modal.tsx"],"names":["React","useState","usePubNub","MemberList","getNameInitials","getPredefinedColor","CreateChatModal","users","currentUser","setCurrentChannel","hideModal","pubnub","creatingChannel","setCreatingChannel","showGroups","setShowGroups","selectedUsers","setSelectedUsers","usersFilter","setUsersFilter","channelName","setChannelName","handleCheck","member","find","m","id","filter","createChat","user","uuids","channel","localData","remoteData","randomHex","Array","map","Math","floor","random","toString","join","custom","thumb","sort","name","profileUrl","split","objects","setChannelMetadata","data","setChannelMembers","e","target","value","u","toLowerCase","includes","SelectableUserRenderer","undefined","length","userSelected","backgroundColor","title"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { usePubNub } from \"pubnub-react\";\nimport { MemberList, getNameInitials, getPredefinedColor } from \"@pubnub/react-chat-components\";\nimport { UUIDMetadataObject, ChannelMetadataObject, ObjectCustom } from \"pubnub\";\n\ntype UserType = UUIDMetadataObject<ObjectCustom>;\ntype ChannelType = ChannelMetadataObject<ObjectCustom>;\n\ninterface CreateChatModalProps {\n  users: UserType[];\n  currentUser: UserType;\n  setCurrentChannel: (channel: Pick<ChannelType, \"id\" | \"name\" | \"description\">) => void;\n  hideModal: () => void;\n}\n\ninterface UserRendererProps {\n  user: UserType;\n  selectedUsers: UserType[];\n  handleCheck: (member: UserType) => void;\n}\n\n/**\n * This modal is opened after clicking the \"plus\" icon next to the Direct chats header\n * It is used to create new private chats between selected users\n * It creates two kind of channels, direct. and group., depending on how many users were selected\n */\nexport const CreateChatModal = ({\n  users,\n  currentUser,\n  setCurrentChannel,\n  hideModal,\n}: CreateChatModalProps): JSX.Element => {\n  const pubnub = usePubNub();\n  const [creatingChannel, setCreatingChannel] = useState(false);\n  const [showGroups, setShowGroups] = useState(false);\n  const [selectedUsers, setSelectedUsers] = useState<UserType[]>([]);\n  const [usersFilter, setUsersFilter] = useState(\"\");\n  const [channelName, setChannelName] = useState(\"\");\n\n  const handleCheck = (member: UserType) => {\n    setSelectedUsers((users) => {\n      return users.find((m) => m.id === member.id)\n        ? users.filter((m) => m.id !== member.id)\n        : [...users, member];\n    });\n  };\n\n  const createChat = async (user?: UserType) => {\n    if (creatingChannel) return;\n    setCreatingChannel(true);\n    let uuids, channel, localData, remoteData;\n    const randomHex = [...Array(27)]\n      .map(() => Math.floor(Math.random() * 16).toString(16))\n      .join(\"\");\n    const custom = { thumb: `https://www.gravatar.com/avatar/${randomHex}?s=256&d=identicon` };\n\n    if (user) {\n      /** 1-on-1 chat */\n      const users = [currentUser, user];\n      uuids = users.map((m) => m.id).sort();\n      channel = `direct.${uuids.join(\"@\")}`;\n      remoteData = {\n        name: users\n          .map((m) => m.name)\n          .sort()\n          .join(\" and \"),\n        custom,\n      };\n      localData = {\n        name: user.name,\n        custom: { thumb: user.profileUrl },\n      };\n    } else {\n      /** Group chat */\n      const users = [currentUser, ...selectedUsers];\n      uuids = users.map((m) => m.id).sort();\n      channel = `group.${randomHex}`;\n      const name =\n        channelName ||\n        users\n          .map((m) => m.name?.split(\" \")[0])\n          .sort()\n          .join(\", \");\n      remoteData = { name, custom };\n      localData = remoteData;\n    }\n\n    await pubnub.objects.setChannelMetadata({ channel, data: remoteData });\n    await pubnub.objects.setChannelMembers({ channel, uuids });\n    setCurrentChannel({ id: channel, ...localData });\n    setCreatingChannel(false);\n    hideModal();\n  };\n\n  return (\n    <div className=\"overlay\">\n      <div className=\"modal create-chat-modal\">\n        <div className=\"header\">\n          {showGroups && (\n            <button className=\"material-icons-outlined\" onClick={() => setShowGroups(false)}>\n              chevron_left\n            </button>\n          )}\n          <strong>New chat</strong>\n          <button className=\"material-icons-outlined\" onClick={() => hideModal()}>\n            close\n          </button>\n        </div>\n\n        <div className=\"filter-input\">\n          <input\n            onChange={(e) => setUsersFilter(e.target.value)}\n            placeholder=\"Search in users\"\n            type=\"text\"\n            value={usersFilter}\n          />\n          <i className=\"material-icons-outlined\">search</i>\n        </div>\n\n        {showGroups ? (\n          <input\n            className=\"large\"\n            onChange={(e) => setChannelName(e.target.value)}\n            placeholder=\"Group chat name (optional)\"\n            type=\"text\"\n            value={channelName}\n          />\n        ) : (\n          <button className=\"group-button\" onClick={() => setShowGroups(true)}>\n            <i className=\"material-icons-outlined\">people</i>\n            <p>New group chat</p>\n            <i className=\"material-icons-outlined\">chevron_right</i>\n          </button>\n        )}\n\n        <h2>Users</h2>\n        <MemberList\n          members={users.filter((u) => u.name?.toLowerCase().includes(usersFilter.toLowerCase()))}\n          onMemberClicked={(user) => createChat(user)}\n          memberRenderer={\n            showGroups\n              ? (user) => SelectableUserRenderer({ user, selectedUsers, handleCheck })\n              : undefined\n          }\n        />\n        {!!selectedUsers.length && (\n          <div className=\"footer\">\n            <button disabled={creatingChannel} onClick={() => createChat()}>\n              Create group chat\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n/**\n * This custom renderer is passed into the Chat Components' MemberList\n * It is used to inject checked/unchecked icon into each member on the list\n * It uses most of the same classes as Components to look the same way apart of the icon\n */\nconst SelectableUserRenderer = ({ user, selectedUsers, handleCheck }: UserRendererProps) => {\n  const userSelected = selectedUsers.find((m: UserType) => m.id === user.id);\n  return (\n    <div key={user.id} className=\"pn-member\" onClick={() => handleCheck(user)}>\n      <div className=\"pn-member__avatar\" style={{ backgroundColor: getPredefinedColor(user.id) }}>\n        {user.profileUrl ? (\n          <img src={user.profileUrl} alt=\"User avatar\" />\n        ) : (\n          getNameInitials(user.name || user.id)\n        )}\n      </div>\n      <div className=\"pn-member__main\">\n        <p className=\"pn-member__name\">{user.name}</p>\n        <p className=\"pn-member__title\">{user.custom?.title}</p>\n      </div>\n      <div className={`check-icon ${userSelected && \"checked\"}`}>\n        {userSelected && <i className=\"material-icons-outlined\">check</i>}\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}